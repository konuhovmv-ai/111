import 'dotenv/config';
import TelegramBot from 'node-telegram-bot-api';
import { db } from './firebaseService.js'; // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à firebaseService.js –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω

// –í–∞—à —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
const TOKEN = process.env.TELEGRAM_BOT_TOKEN;
if (!TOKEN) {
    console.error("–û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ TELEGRAM_BOT_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Ñ–∞–π–ª–µ .env");
    process.exit(1);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞, –Ω–æ –ø–æ–∫–∞ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ
const bot = new TelegramBot(TOKEN, { polling: false });

// --- –ù–û–í–ê–Ø –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –ü–ï–†–ï–ú–ï–ù–ù–ê–Ø –î–õ–Ø –ö–û–ù–°–¢–ê–ù–¢ ---
let gameConstants = {}; // –ó–¥–µ—Å—å –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
// --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –ì–õ–û–ë–ê–õ–¨–ù–û–ô –ü–ï–†–ï–ú–ï–ù–ù–û–ô ---

// --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –î–õ–Ø –õ–û–ì–ò–ö–ò –î–í–ò–ñ–ï–ù–ò–Ø ---
// –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞—é—Ç—Å—è –≤ –∫–æ–¥–µ, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∏–∑–º–µ–Ω—è–µ–º—ã–º–∏ –∏–≥—Ä–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
const DIRECTIONS_MAP = {
    "NORTH": { dx: 0, dy: 1 },
    "EAST": { dx: 1, dy: 0 },
    "SOUTH": { dx: 0, dy: -1 },
    "WEST": { dx: -1, dy: 0 }
};

const TURN_MAP = {
    "NORTH": { "STRAIGHT": "NORTH", "RIGHT": "EAST", "LEFT": "WEST", "BACK": "SOUTH" },
    "EAST": { "STRAIGHT": "EAST", "RIGHT": "SOUTH", "LEFT": "NORTH", "BACK": "WEST" },
    "SOUTH": { "STRAIGHT": "SOUTH", "RIGHT": "WEST", "LEFT": "EAST", "BACK": "NORTH" },
    "WEST": { "STRAIGHT": "WEST", "RIGHT": "NORTH", "LEFT": "SOUTH", "BACK": "EAST" }
};

const DIRECTION_EMOJIS = {
    "NORTH": "‚¨ÜÔ∏è",
    "EAST": "‚û°Ô∏è",
    "SOUTH": "‚¨áÔ∏è",
    "WEST": "‚¨ÖÔ∏è"
};

function getDirectionWithEmoji(direction) {
    const emoji = DIRECTION_EMOJIS[direction] || '';
    return `${direction} ${emoji}`;
}

// --- –§–£–ù–ö–¶–ò–ò –ü–û–ú–û–©–ù–ò–ö–ò ---
function calculateNewPositionAndDirection(currentX, currentY, currentDirection, steps, turnChoice) {
    let newDirection = currentDirection;

    let turnType;
    if (turnChoice === 1) turnType = "RIGHT";
    else if (turnChoice === 2) turnType = "LEFT";
    else if (turnChoice === 3) turnType = "STRAIGHT";
    else if (turnChoice === 4) turnType = "BACK";

    newDirection = TURN_MAP[currentDirection][turnType];

    const { dx, dy } = DIRECTIONS_MAP[newDirection];

    let newX = currentX + dx * steps;
    let newY = currentY + dy * steps;

    // –ò–°–ü–û–õ–¨–ó–£–ï–ú gameConstants.boardSize
    newX = Math.max(1, Math.min(gameConstants.boardSize, newX));
    newY = Math.max(1, Math.min(gameConstants.boardSize, newY));

    return { newX, newY, newDirection };
}

// --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –ü–†–û–î–ê–ñ–ò –£–ß–ê–°–¢–ö–û–í ---
async function handleAutoSale(bot, userId, username, currentWallet, requiredAmount) {
    const boardCellsRef = db.ref('board_cells');
    const allBoardCellsSnapshot = await boardCellsRef.once('value');
    const allBoardCells = allBoardCellsSnapshot.val();

    let ownedPlots = [];
    if (allBoardCells) {
        for (const fieldKey in allBoardCells) {
            const cellData = allBoardCells[fieldKey];
            // –ü—Ä–æ–¥–∞–≤–∞—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–∫–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏
            if (cellData && cellData.ownerId === userId && cellData.purchasePrice > 0) {
                ownedPlots.push({
                    fieldKey: fieldKey,
                    ...cellData
                });
            }
        }
    }

    if (ownedPlots.length === 0) {
        // –ù–µ—á–µ–≥–æ –ø—Ä–æ–¥–∞–≤–∞—Ç—å
        return { success: false, newWallet: currentWallet, messages: [] };
    }

    let saleMessages = [];
    let wallet = currentWallet;
    const salePercentage = 0.7;
    const bankBalanceRef = db.ref('bank/bank_balance'); // –°—Å—ã–ª–∫–∞ –Ω–∞ —É–∑–µ–ª –±–∞–ª–∞–Ω—Å–∞ –ë–∞–Ω–∫–∞


    let saleNotificationMessageToOthers = `üì£ ${username} –±—ã–ª –≤—ã–Ω—É–∂–¥–µ–Ω –ø—Ä–æ–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —É—á–∞—Å—Ç–∫–∏, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É:`;
    let soldPlotsForNotification = [];

    while (wallet < requiredAmount && ownedPlots.length > 0) {
        const plotIndexToSell = Math.floor(Math.random() * ownedPlots.length);
        const plotToSell = ownedPlots[plotIndexToSell];
        const [x, y] = plotToSell.fieldKey.split('_');

        ownedPlots.splice(plotIndexToSell, 1);

        const salePrice = Math.floor(plotToSell.purchasePrice * salePercentage);

        const bankUpdateResult = await bankBalanceRef.transaction((currentBalance) => {
            const newBalance = (currentBalance || 0) - salePrice;
            // –£–±—Ä–∞–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ –±–∞–Ω–∫–∞. –¢–µ–ø–µ—Ä—å –æ–Ω –º–æ–∂–µ—Ç —É—Ö–æ–¥–∏—Ç—å –≤ –º–∏–Ω—É—Å, —á—Ç–æ–±—ã –≤—ã–∫—É–ø–∏—Ç—å —É—á–∞—Å—Ç–æ–∫.
            return newBalance;
        });

        if (bankUpdateResult.committed) {
            wallet += salePrice;

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—á–∞—Å—Ç–æ–∫ –≤ –≥–æ—Å. —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å

            await boardCellsRef.child(plotToSell.fieldKey).update({ ownerId: 0 });

            const saleMessage = `\nüö® –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–∞–Ω –≤–∞—à —É—á–∞—Å—Ç–æ–∫ (${x}, ${y}) –∑–∞ ${salePrice} –º–æ–Ω–µ—Ç. –î–µ–Ω—å–≥–∏ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –ë–∞–Ω–∫–∞.`;
            saleMessages.push(saleMessage);
            soldPlotsForNotification.push(`(${x}, ${y})`);

        } else {
            const failedSaleMessage = `\n‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–¥–∞—Ç—å —É—á–∞—Å—Ç–æ–∫ (${x}, ${y}) –Ω–µ —É–¥–∞–ª–∞—Å—å –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏ —Å –±–∞–Ω–∫–æ–º.`;
            saleMessages.push(failedSaleMessage);
        }
    }

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –±—ã–ª–æ –ø—Ä–æ–¥–∞–Ω–æ
    if (soldPlotsForNotification.length > 0) {
        saleNotificationMessageToOthers += ` ${soldPlotsForNotification.join(', ')}. –¢–µ–ø–µ—Ä—å –æ–Ω–∏ —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏!`;
        const allPlayersSnapshot = await db.ref('players').once('value');
        const allPlayers = allPlayersSnapshot.val();
        if (allPlayers) {
            for (const otherPlayerId in allPlayers) {
                if (otherPlayerId !== userId && allPlayers[otherPlayerId].status === "playing" && allPlayers[otherPlayerId].chatId) {
                    bot.sendMessage(allPlayers[otherPlayerId].chatId, saleNotificationMessageToOthers)
                        .catch(err => console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞ ${otherPlayerId} –æ –ø—Ä–æ–¥–∞–∂–µ:`, err.message));
                }
            }
        }
    }

    return {
        success: wallet >= requiredAmount,
        newWallet: wallet,
        messages: saleMessages
    };
}

// --- –ù–û–í–ê–Ø –ê–°–ò–ù–•–†–û–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –ë–û–¢–ê ---
async function initializeBot() {
    try {
        const configRef = db.ref('game_config');
        const bankBalanceRef = db.ref('bank/bank_balance'); // –°—Å—ã–ª–∫–∞ –Ω–∞ —É–∑–µ–ª –±–∞–ª–∞–Ω—Å–∞ –ë–∞–Ω–∫–∞

        const snapshot = await configRef.once('value');
        const bankSnapshot = await bankBalanceRef.once('value'); // –°—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ë–∞–Ω–∫–∞

        if (snapshot.exists()) {
            gameConstants = snapshot.val();
            console.log("–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–≥—Ä—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Firebase:", gameConstants);

            // –î–æ–±–∞–≤–ª—è–µ–º 'initialBankBalance' –≤ —Å–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç
            const requiredConstants = ['initialWalletBalance', 'initialX', 'initialY', 'initialDirection', 'boardSize', 'initialBankBalance'];
            const missingConstants = requiredConstants.filter(key => typeof gameConstants[key] === 'undefined');

            if (missingConstants.length > 0) {
                console.error(`–û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ –≤–∞–∂–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–≥—Ä—ã –≤ Realtime Database: ${missingConstants.join(', ')}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ '/game_config'.`);
                process.exit(1);
            }

        } else {
            console.warn("–í Realtime Database –Ω–µ –Ω–∞–π–¥–µ–Ω —É–∑–µ–ª 'game_config'. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏ –∑–∞–ø–∏—à–µ–º –∏—Ö –≤ –ë–î.");
            gameConstants = {
                initialWalletBalance: 300,
                initialX: 2,
                initialY: 2,
                initialDirection: "NORTH",
                boardSize: 3,
                initialBankBalance: 1000, // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –ë–∞–Ω–∫–∞
            };
            await configRef.set(gameConstants);
            console.log("–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–≥—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ Firebase.");
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å –ë–∞–Ω–∫–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!bankSnapshot.exists()) {
            await bankBalanceRef.set(gameConstants.initialBankBalance);
            console.log(`–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –±–∞–Ω–∫–∞ (${gameConstants.initialBankBalance}) —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.`);
        } else {
            console.log(`–ë–∞–ª–∞–Ω—Å –±–∞–Ω–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω: ${bankSnapshot.val()}`);
        }

        // –¢–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
        bot.startPolling();
        console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...');

    } catch (error) {
        console.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç –∏–≥—Ä—ã –∏–∑ Firebase:", error);
        process.exit(1);
    }
}

// –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞
initializeBot();

// --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô –¢–ï–õ–ï–ì–†–ê–ú –ë–û–¢–ê ---
bot.on('message', async (msg) => {
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –≠—Ç–æ –æ–±—ã—á–Ω–æ –Ω–µ –Ω—É–∂–Ω–æ, —Ç–∞–∫ –∫–∞–∫ bot.startPolling()
    // –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏, –Ω–æ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É.
    if (Object.keys(gameConstants).length === 0) {
        console.warn("–ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ gameConstants. –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ.");
        bot.sendMessage(msg.chat.id, "–ë–æ—Ç –µ—â—ë –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.");
        return;
    }


    const chatId = msg.chat.id;
    const userId = String(msg.from.id);
    const username = msg.from.first_name || msg.from.username || `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}`;
    const text = msg.text;

    const playerRef = db.ref(`players/${userId}`);
    const boardCellsRef = db.ref('board_cells');

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "0" (–Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã)
    if (text === '0') {
        try {
            const snapshot = await playerRef.once('value');

            if (snapshot.exists() && snapshot.val().status === "playing") {
                const { currentX, currentY, currentDirection, wallet, turnsPlayed } = snapshot.val();
                const displayTurnsPlayed = turnsPlayed !== undefined ? turnsPlayed : 0;
                bot.sendMessage(chatId, `–í—ã —É–∂–µ –≤ –∏–≥—Ä–µ, ${username}! –í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è: (${currentX}, ${currentY}), —Å–º–æ—Ç—Ä–∏—Ç–µ ${getDirectionWithEmoji(currentDirection)}. –ù–∞ –±–∞–ª–∞–Ω—Å–µ: ${wallet} –º–æ–Ω–µ—Ç. –•–æ–¥–æ–≤ —Å—ã–≥—Ä–∞–Ω–æ: ${displayTurnsPlayed}. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∫—Ä–æ–º–µ 0), —á—Ç–æ–±—ã –±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫–∏.`);
            } else {
                await playerRef.set({
                    currentX: gameConstants.initialX,
                    currentY: gameConstants.initialY,
                    currentDirection: gameConstants.initialDirection,
                    status: "playing",
                    username: username,
                    wallet: gameConstants.initialWalletBalance,
                    turnsPlayed: 0,
                    chatId: chatId
                });
                bot.sendMessage(chatId, `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É, ${username}! –í—ã –Ω–∞ –ø–æ–ª–µ (${gameConstants.initialX}, ${gameConstants.initialY}), —Å–º–æ—Ç—Ä–∏—Ç–µ ${getDirectionWithEmoji(gameConstants.initialDirection)}. –ù–∞—á–∏–Ω–∞–µ—Ç–µ —Å ${gameConstants.initialWalletBalance} –º–æ–Ω–µ—Ç. –≠—Ç–æ –≤–∞—à 1-–π —Ö–æ–¥! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∫—Ä–æ–º–µ 0), —á—Ç–æ–±—ã –±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫–∏.`);
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏–≥—Ä—ã:", error);
            bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
        }
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "/buy" (–ø–æ–∫—É–ø–∫–∞ —É—á–∞—Å—Ç–∫–∞)
    else if (text === '/buy') {
        try {
            const snapshot = await playerRef.once('value');

            if (!snapshot.exists() || snapshot.val().status !== "playing") {
                bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç, ${username}! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–∏—Ñ—Ä—É 0.`);
                return;
            }

            let playerData = snapshot.val();
            const currentX = playerData.currentX;
            const currentY = playerData.currentY;
            let playerWallet = playerData.wallet || 0;

            const fieldKey = `${currentX}_${currentY}`;
            const cellRef = boardCellsRef.child(fieldKey);
            const cellSnapshot = await cellRef.once('value');
            const cellData = cellSnapshot.val();

            if (!cellData) {
                bot.sendMessage(chatId, `–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ –ø–æ–ª–µ (${currentX}, ${currentY}), –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç—Ç–æ–º –ø–æ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–¥–µ—Å—å –Ω–µ–ª—å–∑—è –Ω–∏—á–µ–≥–æ –∫—É–ø–∏—Ç—å.`);
                return;
            }

            const purchasePrice = cellData.purchasePrice;
            const currentOwnerId = cellData.ownerId;

            if (purchasePrice === 0) {
                bot.sendMessage(chatId, `–ü–æ–ª–µ (${currentX}, ${currentY}) –Ω–µ –ø—Ä–æ–¥–∞–µ—Ç—Å—è.`);
                return;
            }

            if (currentOwnerId === userId) {
                bot.sendMessage(chatId, `–í—ã —É–∂–µ –≤–ª–∞–¥–µ–µ—Ç–µ –ø–æ–ª–µ–º (${currentX}, ${currentY}).`);
                return;
            }

            if (currentOwnerId !== 0) {
                const ownerPlayerSnapshot = await db.ref(`players/${currentOwnerId}`).once('value');
                const ownerUsername = ownerPlayerSnapshot.val() ? ownerPlayerSnapshot.val().username : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–≥—Ä–æ–∫';
                bot.sendMessage(chatId, `–ü–æ–ª–µ (${currentX}, ${currentY}) —É–∂–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∏–≥—Ä–æ–∫—É ${ownerUsername}.`);
                return;
            }

            if (playerWallet < purchasePrice) {
                bot.sendMessage(chatId, `–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–ª—è (${currentX}, ${currentY}). –ù–µ–æ–±—Ö–æ–¥–∏–º–æ ${purchasePrice}, —É –≤–∞—Å ${playerWallet}.`);
                return;
            }

            // --- –ù–û–í–û–ï: –°–Ω–∏–º–∞–µ–º –¥–µ–Ω—å–≥–∏ —Å –∏–≥—Ä–æ–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ë–∞–Ω–∫ ---
            const bankBalanceRef = db.ref('bank/bank_balance');
            await bankBalanceRef.transaction((currentBalance) => {
                return (currentBalance || 0) + purchasePrice; // –î–µ–Ω—å–≥–∏ –ø–æ—Å—Ç—É–ø–∞—é—Ç –≤ –ë–∞–Ω–∫
            });

            playerWallet -= purchasePrice; // –°–ø–∏—Å—ã–≤–∞–µ–º —Å –∏–≥—Ä–æ–∫–∞
            playerData.wallet = playerWallet;
            await playerRef.update({ wallet: playerWallet }); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—à–µ–ª–µ–∫ –∏–≥—Ä–æ–∫–∞

            let newLandCost = cellData.land_cost || 0;
            let bonusFromNeighbors = 0;

            const adjOffsets = [
                { dx: 0, dy: 1 }, { dx: 0, dy: -1 },
                { dx: 1, dy: 0 }, { dx: -1, dy: 0 }
            ];

            for (const offset of adjOffsets) {
                const adjX = currentX + offset.dx;
                const adjY = currentY + offset.dy;

                // –ò–°–ü–û–õ–¨–ó–£–ï–ú gameConstants.boardSize
                if (adjX >= 1 && adjX <= gameConstants.boardSize && adjY >= 1 && adjY <= gameConstants.boardSize) {
                    const adjFieldKey = `${adjX}_${adjY}`;
                    const adjCellSnapshot = await boardCellsRef.child(adjFieldKey).once('value');
                    const adjCellData = adjCellSnapshot.val();

                    if (adjCellData && adjCellData.ownerId === userId) {
                        bonusFromNeighbors += 2;
                    }
                }
            }

            if (bonusFromNeighbors > 0) {
                newLandCost += bonusFromNeighbors;
            }

            await cellRef.update({ ownerId: userId, land_cost: newLandCost });

            let purchaseConfirmationMessage = `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –ø–æ–ª–µ (${currentX}, ${currentY}) –∑–∞ ${purchasePrice} –º–æ–Ω–µ—Ç. –î–µ–Ω—å–≥–∏ –ø–æ—Å—Ç—É–ø–∏–ª–∏ –≤ –ë–∞–Ω–∫. –í–∞—à –±–∞–ª–∞–Ω—Å: ${playerWallet} –º–æ–Ω–µ—Ç.`; // –ò–∑–º–µ–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

            if (bonusFromNeighbors > 0) {
                purchaseConfirmationMessage += `\nüí∞ –ë–ª–∞–≥–æ–¥–∞—Ä—è –≤–ª–∞–¥–µ–Ω–∏—é —Å–æ—Å–µ–¥–Ω–∏–º–∏ —É—á–∞—Å—Ç–∫–∞–º–∏, —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∏–∑–µ–º–ª–µ–Ω–∏—è –Ω–∞ —ç—Ç–æ–º –ø–æ–ª–µ —Ç–µ–ø–µ—Ä—å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ${newLandCost} –º–æ–Ω–µ—Ç (–±–æ–Ω—É—Å +${bonusFromNeighbors} –∑–∞ –±–ª–∏–∑–æ—Å—Ç—å!).`;
            }

            bot.sendMessage(chatId, purchaseConfirmationMessage);

            try {
                const allPlayersSnapshot = await db.ref('players').once('value');
                const allPlayers = allPlayersSnapshot.val();
                if (allPlayers) {
                    for (const otherPlayerId in allPlayers) {
                        if (otherPlayerId !== userId && allPlayers[otherPlayerId].status === "playing" && allPlayers[otherPlayerId].chatId) {
                            const otherPlayerChatId = allPlayers[otherPlayerId].chatId;
                            bot.sendMessage(otherPlayerChatId, `üéâ ${username} –∫—É–ø–∏–ª –ø–æ–ª–µ (${currentX}, ${currentY})!`)
                                .catch(err => console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞ ${otherPlayerId} –æ –ø–æ–∫—É–ø–∫–µ:`, err.message));
                        }
                    }
                }
            } catch (notifyError) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –æ –ø–æ–∫—É–ø–∫–µ:", notifyError);
            }

        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–∫—É–ø–∫–∏ —É—á–∞—Å—Ç–∫–∞:", error);
            bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–∫—É–ø–∫–∏ —É—á–∞—Å—Ç–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "/sale" (–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø—Ä–æ–¥–∞–∂–µ —É—á–∞—Å—Ç–∫–æ–≤)
    else if (text === '/sale') {
        try {
            const snapshot = await playerRef.once('value');

            if (!snapshot.exists() || snapshot.val().status !== "playing") {
                bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç, ${username}! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–∏—Ñ—Ä—É 0.`);
                return;
            }

            const allBoardCellsSnapshot = await boardCellsRef.once('value');
            const allBoardCells = allBoardCellsSnapshot.val();

            let ownedPlots = [];
            if (allBoardCells) {
                for (const fieldKey in allBoardCells) {
                    const cellData = allBoardCells[fieldKey];
                    if (cellData && cellData.ownerId === userId) {
                        ownedPlots.push({
                            fieldKey: fieldKey,
                            purchasePrice: cellData.purchasePrice
                        });
                    }
                }
            }

            if (ownedPlots.length === 0) {
                bot.sendMessage(chatId, `–£ –≤–∞—Å –Ω–µ—Ç —É—á–∞—Å—Ç–∫–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏, ${username}.`);
                return;
            }

            const salePercentage = 0.7;

            const keyboard = {
                inline_keyboard: ownedPlots.map(plot => {
                    const [x, y] = plot.fieldKey.split('_');
                    const estimatedSalePrice = Math.floor(plot.purchasePrice * salePercentage);
                    return [{
                        text: `–ü–æ–ª–µ (${x}, ${y}) - –ü—Ä–æ–¥–∞—Ç—å –∑–∞ ${estimatedSalePrice} –º–æ–Ω–µ—Ç`,
                        callback_data: `sale_${plot.fieldKey}`
                    }];
                })
            };

            bot.sendMessage(chatId, `–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–æ–∫ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏, ${username}:`, { reply_markup: keyboard });

        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –ø—Ä–æ–¥–∞–∂–µ —É—á–∞—Å—Ç–∫–∞:", error);
            bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ —É—á–∞—Å—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ö–æ–¥ –∏–≥—Ä–æ–∫–∞)
    else if (text && text !== '0') {
        try {
            const snapshot = await playerRef.once('value');

            if (!snapshot.exists() || snapshot.val().status !== "playing") {
                bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç, ${username}! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–∏—Ñ—Ä—É 0.`);
                return;
            }

            let playerData = snapshot.val();
            let currentX = playerData.currentX;
            let currentY = playerData.currentY;
            let currentDirection = playerData.currentDirection;
            let playerWallet = playerData.wallet || 0;
            let turnsPlayed = playerData.turnsPlayed !== undefined ? playerData.turnsPlayed : 0;

            if (playerData.skipNextTurn) {
                await playerRef.update({ skipNextTurn: null });
                bot.sendMessage(chatId, `–í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —ç—Ç–æ—Ç —Ö–æ–¥ –∏–∑-–∑–∞ —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ–ª—è! –í—ã –≤—Å–µ –µ—â–µ –Ω–∞ –ø–æ–ª–µ (${currentX}, ${currentY}), —Å–º–æ—Ç—Ä–∏—Ç–µ ${getDirectionWithEmoji(currentDirection)}. –ù–∞ –±–∞–ª–∞–Ω—Å–µ: ${playerWallet} –º–æ–Ω–µ—Ç. –•–æ–¥–æ–≤ —Å—ã–≥—Ä–∞–Ω–æ: ${turnsPlayed}.`);
                return;
            }

            turnsPlayed++;

            const stepsRoll = Math.floor(Math.random() * 2) + 1;
            const turnRoll = Math.floor(Math.random() * 4) + 1;

            let turnMessage = "";
            if (turnRoll === 1) turnMessage = "–≤–ø—Ä–∞–≤–æ";
            else if (turnRoll === 2) turnMessage = "–≤–ª–µ–≤–æ";
            else if (turnRoll === 3) turnMessage = "–ø—Ä—è–º–æ";
            else if (turnRoll === 4) turnMessage = "–Ω–∞–∑–∞–¥";

            const { newX, newY, newDirection } = calculateNewPositionAndDirection(
                currentX, currentY, currentDirection, stepsRoll, turnRoll
            );

            const fieldKey = `${newX}_${newY}`;
            const cellSnapshot = await boardCellsRef.child(fieldKey).once('value');
            const cellData = cellSnapshot.val();

            let landCost = cellData ? (cellData.land_cost || 0) : 0;
            let isTaxOffice = false; // –§–ª–∞–≥ –¥–ª—è –Ω–∞–ª–æ–≥–æ–≤–æ–π –∏–Ω—Å–ø–µ–∫—Ü–∏–∏
            let responseMessage = `–í—ã –±—Ä–æ—Å–∏–ª–∏ –∫—É–±–∏–∫ –∏ –≤—ã–ø–∞–ª–æ ${stepsRoll} —à–∞–≥–æ–≤! –í—ã –ø–æ–≤–µ—Ä–Ω—É–ª–∏ ${turnMessage}. `;

            // --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø –ù–ê–õ–û–ì–û–í–û–ô –ò–ù–°–ü–ï–ö–¶–ò–ò ---
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª–µ –Ω–∞–ª–æ–≥–æ–≤–æ–π –∏–Ω—Å–ø–µ–∫—Ü–∏–µ–π –ø–æ –µ–≥–æ 'effect'
            if (cellData && cellData.type === 'special' && cellData.effect === 'tax_office') {
                isTaxOffice = true;
                let totalTax = 0;
                const allBoardCellsSnapshot = await boardCellsRef.once('value');
                const allBoardCells = allBoardCellsSnapshot.val();

                if (allBoardCells) {
                    for (const key in allBoardCells) {
                        const plot = allBoardCells[key];
                        // –°—É–º–º–∏—Ä—É–µ–º land_cost –≤—Å–µ—Ö —É—á–∞—Å—Ç–∫–æ–≤, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏—Ö –∏–≥—Ä–æ–∫—É
                        if (plot.ownerId === userId && plot.land_cost > 0) {
                            totalTax += plot.land_cost;
                        }
                    }
                }

                landCost = totalTax; // –ù–∞–ª–æ–≥ —Ä–∞–≤–µ–Ω —Å—É–º–º–µ land_cost –≤—Å–µ—Ö —É—á–∞—Å—Ç–∫–æ–≤ –∏–≥—Ä–æ–∫–∞
                responseMessage += `\n\n–í—ã –ø–æ–ø–∞–ª–∏ –≤ –ù–∞–ª–æ–≥–æ–≤—É—é –∏–Ω—Å–ø–µ–∫—Ü–∏—é! üëÆ‚Äç‚ôÇÔ∏è`;
                if (landCost > 0) {
                    responseMessage += `\n–°—É–º–º–∞ –Ω–∞–ª–æ–≥–∞, —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –≤–ª–∞–¥–µ–Ω–∏–π, —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ${landCost} –º–æ–Ω–µ—Ç.`;
                } else {
                    responseMessage += `\n–¢–∞–∫ –∫–∞–∫ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Ö–æ–¥–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤, –Ω–∞–ª–æ–≥ –Ω–µ –≤–∑–∏–º–∞–µ—Ç—Å—è.`;
                }
            }

            let finalX = newX;
            let finalY = newY;
            let finalDirection = newDirection;
            let skipNextTurn = null;
            let paidAmount = 0;

            const currentOwnerId = cellData ? cellData.ownerId : 0; // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
            const ownerPlayerSnapshot = await db.ref(`players/${currentOwnerId}`).once('value');
            const ownerUsername = ownerPlayerSnapshot.val() ? ownerPlayerSnapshot.val().username : '–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ';


            if (currentOwnerId === userId) {
                responseMessage += `\n\n–í—ã –ø–æ–ø–∞–ª–∏ –Ω–∞ —Å–≤–æ–µ –ø–æ–ª–µ (${newX}, ${newY}). –ü–ª–∞—Ç–∞ –∑–∞ –ø—Ä–∏–∑–µ–º–ª–µ–Ω–∏–µ –Ω–µ –≤–∑–∏–º–∞–µ—Ç—Å—è!`;
            } else {
                let canAfford = playerWallet >= landCost;

                // –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ –∏ –Ω—É–∂–Ω–æ –ø–ª–∞—Ç–∏—Ç—å (–∞ –Ω–µ –ø–æ–ª—É—á–∞—Ç—å –±–æ–Ω—É—Å)
                if (!canAfford && landCost > 0) {
                    responseMessage += `\nüö® –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∞—Ä–µ–Ω–¥—ã (${landCost} –º–æ–Ω–µ—Ç). –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–¥–∞–∂–∏ —É—á–∞—Å—Ç–∫–æ–≤...`;
                    const autoSaleResult = await handleAutoSale(bot, userId, username, playerWallet, landCost);

                    playerWallet = autoSaleResult.newWallet;
                    responseMessage += autoSaleResult.messages.join('');

                    canAfford = autoSaleResult.success; // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥, —É–¥–∞–ª–æ—Å—å –ª–∏ —Å–æ–±—Ä–∞—Ç—å –Ω—É–∂–Ω—É—é —Å—É–º–º—É
                }

                // –ï—Å–ª–∏ –≤ –∏—Ç–æ–≥–µ –¥–µ–Ω–µ–≥ —Ö–≤–∞—Ç–∞–µ—Ç (–∏–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ –±—ã–ª–æ –ø–ª–∞—Ç–∏—Ç—å / –Ω—É–∂–Ω–æ –±—ã–ª–æ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å)
                if (canAfford) {
                    if (landCost !== 0) {
                        playerWallet -= landCost;
                        paidAmount = landCost;

                        if (landCost > 0) {
                            if (!isTaxOffice) {
                                responseMessage += `\n\n–í—ã –ø–æ–ø–∞–ª–∏ –Ω–∞ –ø–æ–ª–µ (${newX}, ${newY}). \n–í–ª–∞–¥–µ–ª–µ—Ü –ø–æ–ª—è: ${ownerUsername}(${currentOwnerId}). \n–í—ã –æ–ø–ª–∞—Ç–∏–ª–∏ ${paidAmount} –º–æ–Ω–µ—Ç –∑–∞ –≤—Ö–æ–¥. `;
                            } else {
                                responseMessage += `\n–í—ã –æ–ø–ª–∞—Ç–∏–ª–∏ –Ω–∞–ª–æ–≥ –≤ —Ä–∞–∑–º–µ—Ä–µ ${paidAmount} –º–æ–Ω–µ—Ç.`;
                            }
                        } else {
                            responseMessage += `\n\n–í—ã –ø–æ–ø–∞–ª–∏ –Ω–∞ –ø–æ–ª–µ (${newX}, ${newY}) –∏ –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å –≤ —Ä–∞–∑–º–µ—Ä–µ ${-paidAmount} –º–æ–Ω–µ—Ç!`;
                        }

                        if (ownerPlayerSnapshot.exists()) {
                            const ownerData = ownerPlayerSnapshot.val();
                            const ownerWallet = ownerData.wallet || 0;
                            const newOwnerWallet = ownerWallet + paidAmount;

                            await db.ref(`players/${currentOwnerId}`).update({ wallet: newOwnerWallet });

                            if (landCost > 0) {
                                responseMessage += `\n${ownerUsername} –ø–æ–ª—É—á–∏–ª ${paidAmount} –º–æ–Ω–µ—Ç.`;
                                if (ownerData.chatId) {
                                    try {
                                        bot.sendMessage(ownerData.chatId, `üí∞ –í–∞–º –ø—Ä–∏—à–ª–∞ –æ–ø–ª–∞—Ç–∞! –ò–≥—Ä–æ–∫ ${username} –ø—Ä–∏–∑–µ–º–ª–∏–ª—Å—è –Ω–∞ –≤–∞—à–µ–º –ø–æ–ª–µ (${newX}, ${newY}) –∏ –∑–∞–ø–ª–∞—Ç–∏–ª ${paidAmount} –º–æ–Ω–µ—Ç. –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${newOwnerWallet} –º–æ–Ω–µ—Ç.`);
                                    } catch (notificationError) {
                                        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü—É ${ownerUsername} (chatId: ${ownerData.chatId}):`, notificationError);
                                    }
                                }
                            }
                        } else {
                            // –î–µ–Ω—å–≥–∏ –∏–¥—É—Ç –≤/–∏–∑ –ë–∞–Ω–∫–∞, –µ—Å–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü - –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ (ownerId: 0)
                            const bankBalanceRef = db.ref('bank/bank_balance');
                            await bankBalanceRef.transaction((currentBalance) => {
                                return (currentBalance || 0) + paidAmount;
                            });
                            responseMessage += `\n–î–µ–Ω—å–≥–∏ (${paidAmount > 0 ? paidAmount : -paidAmount} –º–æ–Ω–µ—Ç) ${paidAmount > 0 ? '–ø–æ—Å—Ç—É–ø–∏–ª–∏ –≤' : '–ø–æ–ª—É—á–µ–Ω—ã –∏–∑'} –ë–∞–Ω–∫–∞.`;
                        }
                    } else {
                        if (!isTaxOffice) { // –ù–µ –¥—É–±–ª–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–∞–ª–æ–≥–æ–≤–æ–π —Å –Ω—É–ª–µ–≤—ã–º –Ω–∞–ª–æ–≥–æ–º
                            responseMessage += `\n\n–í—ã –ø–æ–ø–∞–ª–∏ –Ω–∞ –ø–æ–ª–µ (${newX}, ${newY}). –≠—Ç–æ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è, –ø–ª–∞—Ç–∞ –Ω–µ –≤–∑–∏–º–∞–µ—Ç—Å—è.`;
                        }
                    }
                } else {
                    // --- –ò–ó–ú–ï–ù–ï–ù–û: –õ–û–ì–ò–ö–ê –ü–†–û–ò–ì–†–´–®–ê ---
                    // –î–µ–Ω–µ–≥ –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ –¥–∞–∂–µ –ø–æ—Å–ª–µ –ø—Ä–æ–¥–∞–∂–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–∫–æ–≤ (–∏–ª–∏ –µ—Å–ª–∏ —É—á–∞—Å—Ç–∫–æ–≤ –Ω–µ –±—ã–ª–æ)
                    responseMessage += `\n\nGAME OVER!\n–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ (${playerWallet} –º–æ–Ω–µ—Ç) –¥–ª—è –æ–ø–ª–∞—Ç—ã –∞—Ä–µ–Ω–¥—ã –≤ ${landCost} –º–æ–Ω–µ—Ç. –í—ã –≤—ã–±—ã–≤–∞–µ—Ç–µ –∏–∑ –∏–≥—Ä—ã.`;

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–∏–≥—Ä—ã—à–µ
                    bot.sendMessage(chatId, responseMessage);

                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
                    const allPlayersSnapshot = await db.ref('players').once('value');
                    const allPlayers = allPlayersSnapshot.val();
                    if (allPlayers) {
                        for (const otherPlayerId in allPlayers) {
                            if (otherPlayerId !== userId && allPlayers[otherPlayerId].status === "playing" && allPlayers[otherPlayerId].chatId) {
                                bot.sendMessage(allPlayers[otherPlayerId].chatId, `‚ò†Ô∏è –ò–≥—Ä–æ–∫ ${username} –æ–±–∞–Ω–∫—Ä–æ—Ç–∏–ª—Å—è –∏ –≤—ã–±—ã–ª –∏–∑ –∏–≥—Ä—ã!`)
                                    .catch(err => console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞ ${otherPlayerId} –æ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–µ:`, err.message));
                            }
                        }
                    }

                    // –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                    await playerRef.remove();
                    return;
                    // --- –ö–û–ù–ï–¶ –õ–û–ì–ò–ö–ò –ü–†–û–ò–ì–†–´–®–ê ---
                }
            }


            // --- –õ–û–ì–ò–ö–ê –°–ü–ï–¶–ò–ê–õ–¨–ù–´–• –≠–§–§–ï–ö–¢–û–í ---
            if (cellData && cellData.type === 'special' && finalX === newX && finalY === newY && !isTaxOffice) { // –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ !isTaxOffice
                responseMessage += `\n${cellData.message}`;

                switch (cellData.effect) {
                    case 'go_back':
                        // –ò–°–ü–û–õ–¨–ó–£–ï–ú gameConstants.boardSize
                        finalX = Math.max(1, Math.min(gameConstants.boardSize, finalX - DIRECTIONS_MAP[finalDirection].dx * cellData.value));
                        finalY = Math.max(1, Math.min(gameConstants.boardSize, finalY - DIRECTIONS_MAP[finalDirection].dy * cellData.value));
                        responseMessage += ` –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –ø–æ–ª–µ (${finalX}, ${finalY}).`;
                        break;
                    case 'extra_turn':
                        break;
                    case 'lose_turn':
                        skipNextTurn = true;
                        break;
                }
            }

            let bonusMessage = '';
            if (turnsPlayed % 5 === 0) {
                playerWallet += 9;
                bonusMessage = `\nüéÅ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Å–æ–≤–µ—Ä—à–∏–ª–∏ ${turnsPlayed}-–π —Ö–æ–¥ –∏ –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å: +9 –º–æ–Ω–µ—Ç!`;
            }

            let fieldDetails = '';
            if (cellData) {
                const fieldLandCost = cellData.land_cost || 0;
                const fieldPurchasePrice = cellData.purchasePrice || 0;
                const fieldOwnerUsername = ownerUsername;

                fieldDetails += `\n\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª–µ (${finalX}, ${finalY}):`;
                fieldDetails += `\n ‚Ä¢ –í–ª–∞–¥–µ–ª–µ—Ü: ${fieldOwnerUsername}.`;

                if (fieldLandCost > 0) {
                    fieldDetails += `\n ‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∏–∑–µ–º–ª–µ–Ω–∏—è: ${fieldLandCost} –º–æ–Ω–µ—Ç.`;
                } else {
                    fieldDetails += `\n ‚Ä¢ –ü—Ä–∏–∑–µ–º–ª–µ–Ω–∏–µ –Ω–∞ —ç—Ç–æ –ø–æ–ª–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ.`;
                }

                if (fieldPurchasePrice > 0 && cellData.ownerId === 0) {
                    fieldDetails += `\n ‚Ä¢ –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: ${fieldPurchasePrice} –º–æ–Ω–µ—Ç.`;
                } else if (cellData.ownerId === 0 && fieldPurchasePrice === 0) {
                    fieldDetails += `\n ‚Ä¢ –≠—Ç–æ –ø–æ–ª–µ –Ω–µ –ø—Ä–æ–¥–∞–µ—Ç—Å—è.`;
                }
            }
            responseMessage += fieldDetails;


            responseMessage += `\n–¢–µ–ø–µ—Ä—å –≤—ã –Ω–∞ –ø–æ–ª–µ (${finalX}, ${finalY}), —Å–º–æ—Ç—Ä–∏—Ç–µ ${getDirectionWithEmoji(finalDirection)}. –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ: ${playerWallet} –º–æ–Ω–µ—Ç. –≠—Ç–æ –≤–∞—à ${turnsPlayed}-–π —Ö–æ–¥.`;
            responseMessage += bonusMessage;


            playerData.status = "playing";
            playerData.currentX = finalX;
            playerData.currentY = finalY;
            playerData.currentDirection = finalDirection;
            playerData.wallet = playerWallet;
            playerData.turnsPlayed = turnsPlayed;
            if (skipNextTurn !== null) {
                playerData.skipNextTurn = skipNextTurn;
            }

            await playerRef.update(playerData);
            bot.sendMessage(chatId, responseMessage);

            try {
                const allPlayersSnapshot = await db.ref('players').once('value');
                const allPlayers = allPlayersSnapshot.val();

                if (allPlayers) {
                    for (const otherPlayerId in allPlayers) {
                        if (otherPlayerId !== userId &&
                            allPlayers[otherPlayerId].status === "playing" &&
                            allPlayers[otherPlayerId].chatId) {

                            const otherPlayerChatId = allPlayers[otherPlayerId].chatId;
                            let notificationMessage = `üì¢ ${username} –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è –Ω–∞ (${finalX}, ${finalY})!`;
                            if (cellData && cellData.type === 'special' && finalX === newX && finalY === newY) {
                                notificationMessage += ` (–ù–∞ –ø–æ–ª–µ ${finalX},${finalY}: ${cellData.message.split('.')[0]}!)`;
                            }
                            if (turnsPlayed % 5 === 0) {
                                notificationMessage += ` (–•–æ–¥ ‚Ññ${turnsPlayed} - ${username} –ø–æ–ª—É—á–∏–ª –±–æ–Ω—É—Å!)`;
                            }
                            bot.sendMessage(otherPlayerChatId, notificationMessage)
                                .catch(err => {
                                    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞ ${otherPlayerId} (${otherPlayerChatId}):`, err.message);
                                });
                        }
                    }
                }
            } catch (notifyError) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤:", notifyError);
            }

        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ö–æ–¥–∞:", error);
            bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ—Å–∫–µ –∫—É–±–∏–∫–æ–≤ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
        }
    }
    else {
        bot.sendMessage(chatId, `–ò–∑–≤–∏–Ω–∏—Ç–µ, ${username}, —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –û—Ç–ø—Ä–∞–≤—å—Ç–µ 0, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É, /buy, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å —É—á–∞—Å—Ç–æ–∫, /sale, —á—Ç–æ–±—ã –ø—Ä–æ–¥–∞—Ç—å —É—á–∞—Å—Ç–æ–∫, –∏–ª–∏ –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫–∏.`);
    }
});

bot.on('callback_query', async (callbackQuery) => {
    const message = callbackQuery.message;
    const chatId = message.chat.id;
    const userId = String(callbackQuery.from.id);
    const username = callbackQuery.from.first_name || callbackQuery.from.username || `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}`;
    const data = callbackQuery.data;

    const playerRef = db.ref(`players/${userId}`);
    const boardCellsRef = db.ref('board_cells');

    if (data.startsWith('sale_')) {
        const fieldKeyToSell = data.substring(5);

        try {
            const playerSnapshot = await playerRef.once('value');
            if (!playerSnapshot.exists() || playerSnapshot.val().status !== "playing") {
                await bot.answerCallbackQuery(callbackQuery.id, { text: "–í–∞—à–∞ –∏–≥—Ä–æ–≤–∞—è —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞ –∏–ª–∏ –≤—ã –Ω–µ –≤ –∏–≥—Ä–µ." });
                bot.editMessageText(`–ü—Ä–æ–¥–∞–∂–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞. ${username}, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–∏—Ñ—Ä—É 0.`, {
                    chat_id: chatId,
                    message_id: message.message_id,
                    reply_markup: { inline_keyboard: [] }
                });
                return;
            }

            let playerData = playerSnapshot.val();
            let playerWallet = playerData.wallet || 0;

            const cellRef = boardCellsRef.child(fieldKeyToSell);
            const cellSnapshot = await cellRef.once('value');
            const cellData = cellSnapshot.val();

            if (!cellData || cellData.ownerId !== userId) {
                await bot.answerCallbackQuery(callbackQuery.id, { text: "–í—ã –Ω–µ –≤–ª–∞–¥–µ–µ—Ç–µ —ç—Ç–∏–º —É—á–∞—Å—Ç–∫–æ–º –∏–ª–∏ –æ–Ω —É–∂–µ –ø—Ä–æ–¥–∞–Ω.", show_alert: true });
                bot.editMessageText(`–£—á–∞—Å—Ç–æ–∫ (${fieldKeyToSell.replace('_', ', ')}) –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–¥–∞–∂–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.`, {
                    chat_id: chatId,
                    message_id: message.message_id,
                    reply_markup: { inline_keyboard: [] }
                });
                return;
            }

            const purchasePrice = cellData.purchasePrice;
            const salePercentage = 0.7;
            const salePrice = Math.floor(purchasePrice * salePercentage);

            // --- –ù–û–í–û–ï: –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏ —Å –ë–∞–Ω–∫–∞ ---
            const bankBalanceRef = db.ref('bank/bank_balance');
            const bankUpdateResult = await bankBalanceRef.transaction((currentBalance) => {
                const newBalance = (currentBalance || 0) - salePrice;
                // –£–±—Ä–∞–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ –±–∞–Ω–∫–∞. –¢–µ–ø–µ—Ä—å –æ–Ω –º–æ–∂–µ—Ç —É—Ö–æ–¥–∏—Ç—å –≤ –º–∏–Ω—É—Å, —á—Ç–æ–±—ã –≤—ã–∫—É–ø–∏—Ç—å —É—á–∞—Å—Ç–æ–∫.
                return newBalance;
            });

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å –ë–∞–Ω–∫–æ–º –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
            if (bankUpdateResult.committed) {
                playerWallet += salePrice; // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –ë–∞–Ω–∫ —Å–º–æ–≥ –≤—ã–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏

                await playerRef.update({ wallet: playerWallet });
                await cellRef.update({ ownerId: 0 }); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—á–∞—Å—Ç–æ–∫ –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É

                await bot.answerCallbackQuery(callbackQuery.id, { text: `–£—á–∞—Å—Ç–æ–∫ (${fieldKeyToSell.replace('_', ', ')}) –ø—Ä–æ–¥–∞–Ω –∑–∞ ${salePrice} –º–æ–Ω–µ—Ç! –î–µ–Ω—å–≥–∏ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –ë–∞–Ω–∫–∞.` });

                bot.editMessageText(`–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–ª–∏ –ø–æ–ª–µ (${fieldKeyToSell.replace('_', ', ')}) –∑–∞ ${salePrice} –º–æ–Ω–µ—Ç. –î–µ–Ω—å–≥–∏ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –ë–∞–Ω–∫–∞. –í–∞—à –±–∞–ª–∞–Ω—Å: ${playerWallet} –º–æ–Ω–µ—Ç. –¢–µ–ø–µ—Ä—å —ç—Ç–æ –ø–æ–ª–µ —Å–Ω–æ–≤–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É.`, {
                    chat_id: chatId,
                    message_id: message.message_id,
                    reply_markup: { inline_keyboard: [] }
                });

                const allPlayersSnapshot = await db.ref('players').once('value');
                const allPlayers = allPlayersSnapshot.val();
                if (allPlayers) {
                    for (const otherPlayerId in allPlayers) {
                        if (otherPlayerId !== userId && allPlayers[otherPlayerId].status === "playing" && allPlayers[otherPlayerId].chatId) {
                            const otherPlayerChatId = allPlayers[otherPlayerId].chatId;
                            bot.sendMessage(otherPlayerChatId, `üì£ ${username} –ø—Ä–æ–¥–∞–ª –ø–æ–ª–µ (${fieldKeyToSell.replace('_', ', ')})! –¢–µ–ø–µ—Ä—å –æ–Ω–æ —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏!`)
                                .catch(err => console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞ ${otherPlayerId} –æ –ø—Ä–æ–¥–∞–∂–µ:`, err.message));
                        }
                    }
                }

            } else {
                // –ï—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å –ë–∞–Ω–∫–æ–º –Ω–µ —É–¥–∞–ª–∞—Å—å
                await bot.answerCallbackQuery(callbackQuery.id, { text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ë–∞–Ω–∫—É.", show_alert: true });
                bot.editMessageText(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ —É—á–∞—Å—Ç–∫–∞ (${fieldKeyToSell.replace('_', ', ')}): –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å–æ —Å—á–µ—Ç–∞ –ë–∞–Ω–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`, {
                    chat_id: chatId,
                    message_id: message.message_id,
                    reply_markup: { inline_keyboard: [] }
                });
            }

        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–¥–∞–∂–∏ —É—á–∞—Å—Ç–∫–∞ —á–µ—Ä–µ–∑ callback:", error);
            await bot.answerCallbackQuery(callbackQuery.id, { text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ —É—á–∞—Å—Ç–∫–∞.", show_alert: true });
            bot.editMessageText(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ —É—á–∞—Å—Ç–∫–∞ (${fieldKeyToSell.replace('_', ', ')}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`, {
                chat_id: chatId,
                message_id: message.message_id,
                reply_markup: { inline_keyboard: [] }
            });
        }
    }
});

bot.on('polling_error', (error) => console.log("–û—à–∏–±–∫–∞ polling'–∞:", error));
